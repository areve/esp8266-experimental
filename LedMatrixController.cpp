#include "LedMatrixController.h"

const byte font8x5[475] =
{
	B00000000, B00000000, B00000000, B00000000, B00000000, // space
	B00000000, B00000000, B11111010, B00000000, B00000000, // !
	B00000000, B11100000, B00000000, B11100000, B00000000, // "
	B00101000, B11111110, B00101000, B11111110, B00101000, // #
	B00100100, B01010100, B11111110, B01010100, B01001000, // $
	B11000100, B11001000, B00010000, B00100110, B01000110, // %
	B01101100, B10010010, B10101010, B01000100, B00001010, // &
	B00000000, B00000000, B11000000, B00000000, B00000000, // '
	B00000000, B00111000, B01000100, B10000010, B00000000, // (
	B00000000, B10000010, B01000100, B00111000, B00000000, // )
	B00101000, B00010000, B01111100, B00010000, B00101000, // *
	B00010000, B00010000, B01111100, B00010000, B00010000, // +
	B00000000, B00000000, B00001010, B00001100, B00000000, // ,
	B00010000, B00010000, B00010000, B00010000, B00010000, // -
	B00000000, B00000000, B00000110, B00000110, B00000000, // .
	B00000100, B00001000, B00010000, B00100000, B01000000, // /
	B01111100, B10001010, B10010010, B10100010, B01111100, // 0
	B00000000, B01000010, B11111110, B00000010, B00000000, // 1
	B01000010, B10000110, B10001010, B10010010, B01100010, // 2
	B10000100, B10000010, B10100010, B11010010, B10001100, // 3
	B00011000, B00101000, B01001000, B11111110, B00001000, // 4
	B11100100, B10100010, B10100010, B10100010, B10011100, // 5
	B00111100, B01010010, B10010010, B10010010, B00001100, // 6
	B11000000, B10001110, B10010000, B10100000, B11000000, // 7
	B01101100, B10010010, B10010010, B10010010, B01101100, // 8
	B01100000, B10010010, B10010010, B10010100, B01111000, // 9
	B00000000, B00000000, B01101100, B01101100, B00000000, // :
	B00000000, B00000000, B01101010, B01101100, B00000000, // ;
	B00010000, B00101000, B01000100, B10000010, B00000000, // <
	B00101000, B00101000, B00101000, B00101000, B00101000, // =
	B00000000, B10000010, B01000100, B00101000, B00010000, // >
	B01000000, B10000000, B10001010, B10010000, B01100000, // ?
	B01001100, B10010010, B10011110, B10000010, B01111100, // @
	B01111110, B10001000, B10001000, B10001000, B01111110, // A
	B11111110, B10010010, B10010010, B10010010, B01101100, // B
	B01111100, B10000010, B10000010, B10000010, B01000100, // C
	B11111110, B10000010, B10000010, B10000010, B01111100, // D
	B11111110, B10010010, B10010010, B10010010, B10000010, // E
	B11111110, B10010000, B10010000, B10010000, B10000000, // F
	B01111100, B10000010, B10000010, B10010010, B01011110, // G
	B11111110, B00010000, B00010000, B00010000, B11111110, // H
	B00000000, B10000010, B11111110, B10000010, B00000000, // I
	B00000100, B00000010, B10000010, B11111100, B10000000, // J
	B11111110, B00010000, B00101000, B01000100, B10000010, // K
	B11111110, B00000010, B00000010, B00000010, B00000010, // L
	B11111110, B01000000, B00110000, B01000000, B11111110, // M
	B11111110, B00100000, B00010000, B00001000, B11111110, // N
	B01111100, B10000010, B10000010, B10000010, B01111100, // O
	B11111110, B10010000, B10010000, B10010000, B01100000, // P
	B01111100, B10000010, B10001010, B10000100, B01111010, // Q
	B11111110, B10010000, B10011000, B10010100, B01100010, // R
	B01100100, B10010010, B10010010, B10010010, B01001100, // S
	B10000000, B10000000, B11111110, B10000000, B10000000, // T
	B11111100, B00000010, B00000010, B00000010, B11111100, // U
	B11111000, B00000100, B00000010, B00000100, B11111000, // V
	B11111100, B00000010, B00011100, B00000010, B11111100, // W
	B11000110, B00101000, B00010000, B00101000, B11000110, // X
	B11100000, B00010000, B00001110, B00010000, B11100000, // Y
	B10000110, B10001010, B10010010, B10100010, B11000010, // Z
	B00000000, B11111110, B10000010, B10000010, B00000000, // [
	B01000000, B00100000, B00010000, B00001000, B00000100, // backslash
	B00000000, B10000010, B10000010, B11111110, B00000000, // ]
	B00100000, B01000000, B10000000, B01000000, B00100000, // ^
	B00000010, B00000010, B00000010, B00000010, B00000010, // _
	B10000000, B01000000, B00100000, B00000000, B00000000, // `
	B00000100, B00101010, B00101010, B00101010, B00011110, // a
	B11111110, B00010010, B00100010, B00100010, B00011100, // b
	B00011100, B00100010, B00100010, B00100010, B00000100, // c
	B00011100, B00100010, B00100010, B00010010, B11111110, // d
	B00011100, B00101010, B00101010, B00101010, B00011000, // e
	B00010000, B01111110, B10010000, B10000000, B01000000, // f
	B00010000, B00101010, B00101010, B00101010, B00111100, // g
	B11111110, B00010000, B00100000, B00100000, B00011110, // h
	B00000000, B00010010, B10111110, B00000010, B00000000, // i
	B00000100, B00000010, B00100010, B10111100, B00000000, // j
	B11111110, B00001000, B00010100, B00100010, B00000000, // k
	B00000000, B10000010, B11111110, B00000010, B00000000, // l
	B00111110, B00100000, B00011110, B00100000, B00011110, // m
	B00111110, B00010000, B00100000, B00100000, B00011110, // n
	B00011100, B00100010, B00100010, B00100010, B00011100, // o
	B00111111, B00101000, B00101000, B00101000, B00010000, // p
	B00010000, B00101000, B00101000, B00011000, B00111110, // q
	B00111110, B00010000, B00100000, B00100000, B00010000, // r
	B00010010, B00101010, B00101010, B00101010, B00000100, // s
	B00100000, B11111100, B00100010, B00000010, B00000100, // t
	B00111100, B00000010, B00000010, B00000100, B00111110, // u
	B00111000, B00000100, B00000010, B00000100, B00111000, // v
	B00111100, B00000010, B00001100, B00000010, B00111100, // w
	B00100010, B00010100, B00001000, B00010100, B00100010, // x
	B00110000, B00001010, B00001010, B00001010, B00111100, // y
	B00100010, B00100110, B00101010, B00110010, B00100010, // z
	B00000000, B00010000, B01101100, B10000010, B00000000, // {
	B00000000, B00000000, B11111110, B00000000, B00000000, // |
	B00000000, B10000010, B01101100, B00010000, B00000000, // }
	B00001000, B00010000, B00010000, B00001000, B00010000, // ~
};

LedMatrixController::LedMatrixController(const uint8_t pin_din, const uint8_t pin_cs, const uint8_t pin_clk)
{
	this->pin_din = pin_din;
	this->pin_cs = pin_cs;
	this->pin_clk = pin_clk;

	pinMode(pin_din, OUTPUT);
	pinMode(pin_cs, OUTPUT);
	pinMode(pin_clk, OUTPUT);

	digitalWrite(pin_din, LOW);
	digitalWrite(pin_cs, LOW);
	digitalWrite(pin_clk, LOW);

	ledControl = new LedControl(pin_din, pin_clk, pin_cs, 1);

	ledControl->shutdown(0, false);
	ledControl->setIntensity(0, 1);
	ledControl->clearDisplay(0);

	lastDraw = millis();
}

void LedMatrixController::update()
{
	const byte* c = font8x5;
	now = millis();
	if (now - lastDraw > interval) {
		for (int y = 0; y < 8; y++) {
			const int col = getColumn(position + y);
			ledControl->setRow(0, 7 - y, c[col]);
		}

		position++;
		lastDraw = now;
	}
}

int LedMatrixController::getColumn(const uint position)
{
	const int col = position % 6;
	const int letter = (position / 6) % text.length();
	if (col == 5) {
		return 0;
	}
	else if (text[letter] >= ' ' && text[letter] <= '~') {
		return 5 * (text[letter] - ' ') + col;
	}

	return 5 * ('?' - ' ') + col;
}

